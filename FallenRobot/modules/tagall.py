import asyncio

from telethon import events
from telethon.errors import UserNotParticipantError
from telethon.tl.functions.channels import GetParticipantRequest
from telethon.tl.types import ChannelParticipantAdmin, ChannelParticipantCreator

from FallenRobot import telethn as client

spam_chats = []


@client.on(events.NewMessage(pattern="^/all ?(.*)"))
@client.on(events.NewMessage(pattern="^@all ?(.*)"))
async def mentionall(event):
    chat_id = event.chat_id
    if event.is_private:
        return await event.respond(
            "·¥ç·¥è·¥Ö·¥ú ü·¥á …™…¥…™ ·¥Ñ·¥ú·¥ç·¥Ä…¥  ô…™Íú±·¥Ä ·¥Ö…™ ·¥ò·¥Ä·¥ã·¥á ·¥Ö…™ …¢·¥Ñ ·¥Ä·¥õ·¥Ä·¥ú ·¥Ö…™ ·¥Ñ ú ·¥ç·¥á·¥ã!"
        )

    is_admin = False
    try:
        partici_ = await client(GetParticipantRequest(event.chat_id, event.sender_id))
    except UserNotParticipantError:
        is_admin = False
    else:
        if isinstance(
            partici_.participant, (ChannelParticipantAdmin, ChannelParticipantCreator)
        ):
            is_admin = True
    if not is_admin:
        return await event.respond(" ú·¥Ä…¥ è·¥Ä ·¥Ä·¥Ö·¥ç…™…¥  è·¥Ä…¥…¢  ô…™s·¥Ä ·¥ò Ä·¥ès·¥ás ·¥õ·¥Ä…¢ ·¥Ä ü ü!")

    if event.pattern_match.group(1) and event.is_reply:
        return await event.respond(" ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥ç…™…¥…™·¥ç·¥Ä ü ùü∑ ·¥ã·¥Ä·¥õ·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥ò Ä·¥ès·¥ás ·¥õ·¥Ä…¢·¥Ä ü ü")
    elif event.pattern_match.group(1):
        mode = "text_on_cmd"
        msg = event.pattern_match.group(1)
    elif event.is_reply:
        mode = "text_on_reply"
        msg = await event.get_reply_message()
        if msg == None:
            return await event.respond(
                "s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ò Ä·¥ès·¥ás ·¥õ·¥Ä…¢ ·¥Ä ü ü ·¥ú…¥·¥õ·¥ú·¥ã ·¥ò·¥ás·¥Ä…¥  ü·¥Ä·¥ç·¥Ä! (·¥ò·¥ás·¥Ä…¥  è·¥Ä…¥…¢ ·¥Ö…™ ·¥ã…™ Ä…™·¥ç s·¥á ô·¥á ü·¥ú·¥ç s·¥Ä è·¥Ä ·¥ç·¥Äs·¥ú·¥ã ·¥ã·¥á …¢ Ä·¥è·¥ú·¥ò"
            )
    else:
        return await event.respond(
            " Ä·¥á·¥ò ü è ·¥ò·¥áÍú±·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä  è·¥Ä…¥…¢ …™…¥…¢…™…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥Ä…¢·¥Ä ü ü!"
        )

    spam_chats.append(chat_id)
    usrnum = 0
    usrtxt = ""
    async for usr in client.iter_participants(chat_id):
        if not chat_id in spam_chats:
            break
        usrnum += 1
        usrtxt += f"‚ùç [{usr.first_name}](tg://user?id={usr.id})\n"
        if usrnum == 5:
            if mode == "text_on_cmd":
                txt = f"{msg}\n\n{usrtxt}"
                await client.send_message(chat_id, txt)
            elif mode == "text_on_reply":
                await msg.reply(usrtxt)
            await asyncio.sleep(3)
            usrnum = 0
            usrtxt = ""
    try:
        spam_chats.remove(chat_id)
    except:
        pass


@client.on(events.NewMessage(pattern="^/cancel$"))
async def cancel_spam(event):
    if not event.chat_id in spam_chats:
        return await event.respond("…¢·¥Ä ·¥Ä·¥Ö·¥Ä  è·¥Ä…¥…¢  ú·¥Ä Ä·¥ús s·¥Ä è·¥Ä  ô·¥á Ä ú·¥á…¥·¥õ…™·¥ã·¥Ä…¥...")
    is_admin = False
    try:
        partici_ = await client(GetParticipantRequest(event.chat_id, event.sender_id))
    except UserNotParticipantError:
        is_admin = False
    else:
        if isinstance(
            partici_.participant, (ChannelParticipantAdmin, ChannelParticipantCreator)
        ):
            is_admin = True
    if not is_admin:
        return await event.respond(" ú·¥Ä…¥ è·¥Ä ·¥Ä·¥Ö·¥ç…™…¥  è·¥Ä…¥…¢ ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á…¥·¥ä·¥Ä ü·¥Ä…¥·¥ã·¥Ä…¥ ·¥ò Ä…™…¥·¥õ·¥Ä ú …™…¥…™")

    else:
        try:
            spam_chats.remove(event.chat_id)
        except:
            pass
        return await event.respond("·¥õ·¥Ä…¢ ·¥Ä ü ü ·¥ç·¥á…¥·¥õ…™·¥è…¥  ô·¥á Ä ú·¥á…¥·¥õ…™")


__mod_name__ = "·¥õ·¥Ä…¢ ·¥Ä ü ü"
__help__ = """
* ú·¥Ä…¥ è·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥Ä·¥Ö·¥ç…™…¥*

‚ùç /all '( Ä·¥á·¥ò ü è ·¥ò·¥ás·¥Ä…¥  è·¥Ä…¥…¢ ·¥ç·¥Ä·¥ú ·¥Ö…™ ·¥õ·¥Ä…¢ ·¥Ä ü) ·¥ú…¥·¥õ·¥ú·¥ã ·¥ò Ä·¥ès·¥ás ·¥ç·¥á ·¥õ·¥Ä…¢ ·¥Ä ü ü ·¥ç·¥á·¥ç ô·¥á Ä …¢ Ä·¥è·¥ú·¥ò.'
"""
